"""
Plot input and reconstruction statistics, as generated by calculate_encodings.py
with the --statistics flag, with output file pd_friendly_stats.txt.

Usage:

"""

import argparse
from pathlib import Path

import numpy as np
import pandas as pd
import seaborn as sns
from matplotlib import rcParams as rc

from utilities.gnina_functions import Timer, format_time


def read_channel_map(filename):
    """Gives a function mapping channel number to atom type.

    Arguments:
        filename: path to ligmap or recmap to be read

    Returns:
        Tuple containing the number of channels in the atom map, and a function
        which maps from a channel number to its atom type, as specified in the
        atom map.
    """
    if filename is None:
        return -1, lambda x: x
    with open(Path(filename).expanduser().resolve(), 'r') as f:
        chunks = f.read().strip().split('\n')
    mapping = {str(channel): '\n'.join(name.split())
               for channel, name in enumerate(chunks)}
    int_mapping = {channel: '\n'.join(name.split())
                   for channel, name in enumerate(chunks)}
    return len(mapping), lambda x: mapping.get(x, int_mapping.get(x, x))


def main(args):
    rc['figure.max_open_warning'] = 120
    if isinstance(args.input_dirs, str):
        input_dirs = [Path(args.input_dirs).expanduser()]
    else:
        input_dirs = [Path(f).expanduser() for f in args.input_dirs]
    input_files = [
        list(directory.rglob('**/pd_friendly_stats.txt'))
        for directory in input_dirs]
    input_files = [
        input_file for input_dirs in input_files for input_file in input_dirs]
    if len(input_files) == 1:
        output_filename = input_dirs[0].parent / Path(args.output_filename).name
    else:
        setattr(args, 'reconstructions_only', True)
        output_filename = Path(args.output_filename).expanduser()

    lig_channels, ligmap_map = read_channel_map(args.ligmap)
    rec_channels, recmap_map = read_channel_map(args.ligmap)

    df = pd.DataFrame()
    with Timer() as t:
        for input_file in input_files:
            print(input_file)
            fdf = pd.read_csv(
                input_file, sep=' ', dtype={
                    'value': np.float64, 'channel': np.str})
            truncated_fname = '/'.join(str(input_file).split('/')[-5:-1])
            fdf['Job path'] = truncated_fname
            df = pd.concat([df, fdf], copy=False)

    df = df[df['statistic'] == 'mean']
    df.rename(columns={'value': 'Value', 'p': 'Source', 'channel': 'Channel',
                       'statistic': 'Statistic',
                       'zero_nonzero': 'Zero/Nonzero'}, inplace=True)
    for original, replacement in zip(
            ['mean', 'var', 'reconstruction', 'original'],
            ['Mean', 'Variance', 'Reconstruction', 'Original']):
        df.replace(original, replacement, inplace=True)

    if args.reconstructions_only:
        print('Only plotting reconstruction statistics.')
        df = df[df['Source'] == 'Reconstruction'].reset_index(drop=True)

    if rec_channels > 0:
        for channel in range(rec_channels):
            df['Channel'].replace(
                str(channel), 'R-' + recmap_map(channel), inplace=True)
    if lig_channels > 0:
        for channel in range(lig_channels):
            df['Channel'].replace(
                str(channel + rec_channels), 'L-' + ligmap_map(channel),
                inplace=True)

    print('Data is in memory ({})'.format(format_time(t.interval)))
    print(df.head())
    with Timer() as t:
        if args.reconstructions_only:
            g = sns.FacetGrid(
                df, col='Zero/Nonzero', row='Channel', hue='Job path', height=5,
                aspect=1,
                sharex=True, sharey=False, legend_out=False)
        else:
            g = sns.FacetGrid(
                df, col='Statistic', row='Channel', hue='Source', height=5,
                aspect=1,
                sharex=True, sharey=False, legend_out=False)
        g.map(sns.kdeplot, 'Value')
        g.map(sns.displot, 'Value')
        g.set_titles(row_template='{row_name}',
                     col_template='{col_name}')
        g.add_legend()
        for ax in g.axes.ravel():
            ax.set_xlim([-0.02, 1.02])

    print('Plots generated ({})'.format(format_time(t.interval)))
    with Timer() as t:
        g.savefig(output_filename)
    print('Plots saved ({})'.format(format_time(t.interval)))


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('input_dirs', type=str, nargs='?',
                        help='Directories containing, at some level, '
                             'files named "pd_friendly_stats.txt"')
    parser.add_argument('--output_filename', type=str,
                        default='~/hist.png', help='Name of output plot')
    parser.add_argument('--recmap', '-r', type=str, required=False,
                        help='Atom map with different smina types on each line')
    parser.add_argument('--ligmap', '-l', type=str, required=False,
                        help='Atom map with different smina types on each line')
    parser.add_argument('--reconstructions_only', '-o', action='store_true',
                        help='Only plot reconstruction stats (useful for '
                             'binary inputs)')

    args = parser.parse_args()
    main(args)
